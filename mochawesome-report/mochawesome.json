{
  "stats": {
    "suites": 5,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-07T15:08:05.471Z",
    "end": "2024-05-07T15:08:05.481Z",
    "duration": 10,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "996a8969-740a-441d-ac60-536e03f8cce0",
      "title": "",
      "fullFile": "C:\\Users\\Mukhammadkodir\\Desktop\\DEV\\EPAM\\Automated Testing in JS Training\\unit-testing\\test\\numbers-validator\\ValidateNumbers.spec.js",
      "file": "\\test\\numbers-validator\\ValidateNumbers.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "56918814-8df4-4de4-94ba-5f48cbac6fc2",
          "title": "NumbersValidator",
          "fullFile": "C:\\Users\\Mukhammadkodir\\Desktop\\DEV\\EPAM\\Automated Testing in JS Training\\unit-testing\\test\\numbers-validator\\ValidateNumbers.spec.js",
          "file": "\\test\\numbers-validator\\ValidateNumbers.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6810e56c-02ed-48cc-af36-881e26685682",
              "title": "#isNumberEven()",
              "fullFile": "C:\\Users\\Mukhammadkodir\\Desktop\\DEV\\EPAM\\Automated Testing in JS Training\\unit-testing\\test\\numbers-validator\\ValidateNumbers.spec.js",
              "file": "\\test\\numbers-validator\\ValidateNumbers.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if number is even",
                  "fullTitle": "NumbersValidator #isNumberEven() should return true if number is even",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nexpect(validator.isNumberEven(2)).to.be.true;",
                  "err": {},
                  "uuid": "edf944bd-9c08-468d-b25a-70ca19b9c603",
                  "parentUUID": "6810e56c-02ed-48cc-af36-881e26685682",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if number is odd",
                  "fullTitle": "NumbersValidator #isNumberEven() should return false if number is odd",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nexpect(validator.isNumberEven(3)).to.be.false;",
                  "err": {},
                  "uuid": "152e5474-573b-4c23-a7b5-41e57cc7676f",
                  "parentUUID": "6810e56c-02ed-48cc-af36-881e26685682",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not a number",
                  "fullTitle": "NumbersValidator #isNumberEven() should throw an error if input is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nexpect(() => validator.isNumberEven(\"not a number\")).to.throw(Error);",
                  "err": {},
                  "uuid": "241782aa-d864-45df-8056-3a2cd447e958",
                  "parentUUID": "6810e56c-02ed-48cc-af36-881e26685682",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edf944bd-9c08-468d-b25a-70ca19b9c603",
                "152e5474-573b-4c23-a7b5-41e57cc7676f",
                "241782aa-d864-45df-8056-3a2cd447e958"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77691761-4819-4fe4-9df2-01a32e7a8459",
              "title": "#getEvenNumbersFromArray()",
              "fullFile": "C:\\Users\\Mukhammadkodir\\Desktop\\DEV\\EPAM\\Automated Testing in JS Training\\unit-testing\\test\\numbers-validator\\ValidateNumbers.spec.js",
              "file": "\\test\\numbers-validator\\ValidateNumbers.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of even numbers",
                  "fullTitle": "NumbersValidator #getEvenNumbersFromArray() should return an array of even numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nconst evenNumbers = validator.getEvenNumbersFromArray([1, 2, 3, 4, 5]);\nexpect(evenNumbers).to.deep.equal([2, 4]);",
                  "err": {},
                  "uuid": "dbf193d3-0ecf-4f7f-aada-846d1ea13d27",
                  "parentUUID": "77691761-4819-4fe4-9df2-01a32e7a8459",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not an array of numbers",
                  "fullTitle": "NumbersValidator #getEvenNumbersFromArray() should throw an error if input is not an array of numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nexpect(() =>\n  validator.getEvenNumbersFromArray([1, \"not a number\", 3])\n).to.throw(Error);",
                  "err": {},
                  "uuid": "66db861c-d73c-45cc-835e-0c86cd91ba93",
                  "parentUUID": "77691761-4819-4fe4-9df2-01a32e7a8459",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbf193d3-0ecf-4f7f-aada-846d1ea13d27",
                "66db861c-d73c-45cc-835e-0c86cd91ba93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c586394-25d7-41ce-98bb-95acecf57525",
              "title": "#isAllNumbers()",
              "fullFile": "C:\\Users\\Mukhammadkodir\\Desktop\\DEV\\EPAM\\Automated Testing in JS Training\\unit-testing\\test\\numbers-validator\\ValidateNumbers.spec.js",
              "file": "\\test\\numbers-validator\\ValidateNumbers.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if all elements are numbers",
                  "fullTitle": "NumbersValidator #isAllNumbers() should return true if all elements are numbers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nconst result = validator.isAllNumbers([1, 2, 3]);\nexpect(result).to.be.true;",
                  "err": {},
                  "uuid": "3228b870-5978-4c64-ad43-7c27e05054e3",
                  "parentUUID": "5c586394-25d7-41ce-98bb-95acecf57525",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if any element is not a number",
                  "fullTitle": "NumbersValidator #isAllNumbers() should return false if any element is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nconst result = validator.isAllNumbers([1, \"not a number\", 3]);\nexpect(result).to.be.false;",
                  "err": {},
                  "uuid": "8c9b9de4-fe87-48eb-8cce-a4d453221aa0",
                  "parentUUID": "5c586394-25d7-41ce-98bb-95acecf57525",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not an array",
                  "fullTitle": "NumbersValidator #isAllNumbers() should throw an error if input is not an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nexpect(() => validator.isAllNumbers(\"not an array\")).to.throw(Error);",
                  "err": {},
                  "uuid": "4dfa6846-8f4f-459f-bdc3-c0370f519e80",
                  "parentUUID": "5c586394-25d7-41ce-98bb-95acecf57525",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3228b870-5978-4c64-ad43-7c27e05054e3",
                "8c9b9de4-fe87-48eb-8cce-a4d453221aa0",
                "4dfa6846-8f4f-459f-bdc3-c0370f519e80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9d13047e-8fc8-4f28-9a82-8e6962d0114f",
              "title": "#isInteger()",
              "fullFile": "C:\\Users\\Mukhammadkodir\\Desktop\\DEV\\EPAM\\Automated Testing in JS Training\\unit-testing\\test\\numbers-validator\\ValidateNumbers.spec.js",
              "file": "\\test\\numbers-validator\\ValidateNumbers.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if value is an integer",
                  "fullTitle": "NumbersValidator #isInteger() should return true if value is an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nexpect(validator.isInteger(5)).to.be.true;",
                  "err": {},
                  "uuid": "bb3bb205-ea25-46fd-8a8b-e02002cabd69",
                  "parentUUID": "9d13047e-8fc8-4f28-9a82-8e6962d0114f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if value is not an integer",
                  "fullTitle": "NumbersValidator #isInteger() should return false if value is not an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nexpect(validator.isInteger(5.5)).to.be.false;",
                  "err": {},
                  "uuid": "ccf4c8f2-1bdc-422f-a9d1-3cb0d70f0b29",
                  "parentUUID": "9d13047e-8fc8-4f28-9a82-8e6962d0114f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not a number",
                  "fullTitle": "NumbersValidator #isInteger() should throw an error if input is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validator = new NumbersValidator();\nexpect(() => validator.isInteger(\"not a number\")).to.throw(Error);",
                  "err": {},
                  "uuid": "ded55ce9-d868-4b47-811c-d4befdd989b4",
                  "parentUUID": "9d13047e-8fc8-4f28-9a82-8e6962d0114f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb3bb205-ea25-46fd-8a8b-e02002cabd69",
                "ccf4c8f2-1bdc-422f-a9d1-3cb0d70f0b29",
                "ded55ce9-d868-4b47-811c-d4befdd989b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}